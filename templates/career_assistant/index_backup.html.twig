{% extends 'base.html.twig' %}

{% block title %}Career Assistant - {{ user.fullName }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --success-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --warning-gradient: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
            --info-gradient: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
            --card-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --card-hover-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
            --border-radius: 16px;
            --chat-bg: #f8fafc;
            --message-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
        }

        .modern-card {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
            border: none;
            transition: all 0.3s ease;
            overflow: hidden;
        }

        .modern-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--card-hover-shadow);
        }

        .gradient-header {
            background: var(--primary-gradient);
            color: white;
            padding: 2rem;
            border-radius: var(--border-radius) var(--border-radius) 0 0;
            position: relative;
            overflow: hidden;
        }

        .gradient-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="white" opacity="0.1"/><circle cx="75" cy="75" r="1" fill="white" opacity="0.1"/><circle cx="50" cy="10" r="0.5" fill="white" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
            opacity: 0.3;
        }

        .stats-card {
            background: white;
            border-radius: var(--border-radius);
            padding: 1.5rem;
            text-align: center;
            box-shadow: var(--card-shadow);
            border: none;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .stats-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: var(--primary-gradient);
        }

        .stats-card:hover {
            transform: translateY(-3px);
            box-shadow: var(--card-hover-shadow);
        }

        .stats-icon {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1rem;
            font-size: 1.5rem;
            color: white;
        }

        .stats-icon.primary { background: var(--primary-gradient); }
        .stats-icon.success { background: var(--success-gradient); }
        .stats-icon.warning { background: var(--warning-gradient); }
        .stats-icon.info { background: var(--info-gradient); }

        .module-card {
            background: white;
            border-radius: var(--border-radius);
            padding: 2rem;
            text-align: center;
            box-shadow: var(--card-shadow);
            border: none;
            transition: all 0.3s ease;
            height: 100%;
            position: relative;
            overflow: hidden;
        }

        .module-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .module-card:hover::before {
            opacity: 1;
        }

        .module-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--card-hover-shadow);
        }

        .module-icon {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1.5rem;
            font-size: 2rem;
            color: white;
            position: relative;
            z-index: 1;
        }

        .chat-container {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
            overflow: hidden;
        }

        .chat-header {
            background: var(--primary-gradient);
            color: white;
            padding: 1.5rem;
            position: relative;
        }

        .chat-messages {
            background: var(--chat-bg);
            height: 400px;
            overflow-y: auto;
            padding: 1.5rem;
        }

        .chat-message {
            margin-bottom: 1.5rem;
            animation: fadeInUp 0.3s ease;
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .message-bubble {
            background: white;
            border-radius: 18px;
            padding: 1rem 1.5rem;
            box-shadow: var(--message-shadow);
            max-width: 85%;
            position: relative;
        }

        .user-message .message-bubble {
            background: var(--primary-gradient);
            color: white;
            margin-left: auto;
        }

        .assistant-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--primary-gradient);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1rem;
            flex-shrink: 0;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--success-gradient);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1rem;
            flex-shrink: 0;
        }

        .chat-input-container {
            padding: 1.5rem;
            background: white;
            border-top: 1px solid #e2e8f0;
        }

        .chat-input {
            border: 2px solid #e2e8f0;
            border-radius: 25px;
            padding: 0.75rem 1.5rem;
            transition: all 0.3s ease;
        }

        .chat-input:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .send-button {
            background: var(--primary-gradient);
            border: none;
            border-radius: 50%;
            width: 45px;
            height: 45px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            transition: all 0.3s ease;
        }

        .send-button:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .sidebar-card {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
            margin-bottom: 1.5rem;
            overflow: hidden;
        }

        .sidebar-header {
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            padding: 1rem 1.5rem;
            border-bottom: 1px solid #e2e8f0;
        }

        .quick-action-btn {
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            padding: 0.75rem;
            transition: all 0.3s ease;
            background: white;
            margin-bottom: 0.5rem;
        }

        .quick-action-btn:hover {
            border-color: #667eea;
            background: rgba(102, 126, 234, 0.05);
            transform: translateX(5px);
        }

        .profile-card {
            text-align: center;
            padding: 2rem;
        }

        .profile-avatar {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            margin: 0 auto 1rem;
            background: var(--primary-gradient);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 2rem;
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
        }

        .badge-modern {
            background: var(--primary-gradient);
            color: white;
            border-radius: 20px;
            padding: 0.25rem 0.75rem;
            font-size: 0.8rem;
            margin: 0.25rem;
        }

        .page-header {
            background: var(--primary-gradient);
            color: white;
            padding: 3rem 0;
            margin: -2rem -15px 2rem -15px;
            position: relative;
            overflow: hidden;
        }

        .page-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="dots" width="20" height="20" patternUnits="userSpaceOnUse"><circle cx="10" cy="10" r="1" fill="white" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23dots)"/></svg>');
        }

        .floating-elements {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            overflow: hidden;
            pointer-events: none;
        }

        .floating-elements::before,
        .floating-elements::after {
            content: '';
            position: absolute;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.1);
        }

        .floating-elements::before {
            width: 200px;
            height: 200px;
            top: -100px;
            right: -100px;
            animation: float 6s ease-in-out infinite;
        }

        .floating-elements::after {
            width: 150px;
            height: 150px;
            bottom: -75px;
            left: -75px;
            animation: float 8s ease-in-out infinite reverse;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(180deg); }
        }

        .mode-selector {
            background: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            color: white;
            border-radius: 8px;
        }

        .mode-selector:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        .conversation-item {
            padding: 1rem;
            border-radius: 12px;
            margin-bottom: 0.5rem;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .conversation-item:hover {
            background: rgba(102, 126, 234, 0.05);
            transform: translateX(5px);
        }

        @media (max-width: 768px) {
            .page-header {
                padding: 2rem 0;
            }
            
            .stats-card {
                margin-bottom: 1rem;
            }
            
            .chat-messages {
                height: 300px;
            }
        }
    </style>
{% endblock %}

{% block body %}
    <!-- Modern Page Header -->
    <div class="page-header">
        <div class="floating-elements"></div>
        <div class="container position-relative">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <div class="d-flex align-items-center">
                        <div class="bg-white bg-opacity-20 rounded-circle d-flex align-items-center justify-content-center me-4" 
                             style="width: 80px; height: 80px; font-size: 2rem;">
                            <i class="bi bi-robot"></i>
                        </div>
                        <div>
                            <h1 class="h2 mb-2 fw-bold">Career Assistant</h1>
                            <p class="mb-0 opacity-90">
                                AI-powered career guidance and development tools tailored for your success
                            </p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 text-md-end mt-3 mt-md-0">
                    <div class="d-flex flex-column align-items-md-end">
                        <small class="opacity-75 mb-1">Welcome back,</small>
                        <h5 class="mb-0 fw-bold">{{ user.fullName }}</h5>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- Modern Stats Cards -->
        <div class="row mb-5">
            <div class="col-md-3 col-sm-6 mb-4">
                <div class="stats-card">
                    <div class="stats-icon primary">
                        <i class="bi bi-award-fill"></i>
                    </div>
                    <h3 class="fw-bold mb-1">{{ stats.totalCredentials }}</h3>
                    <p class="text-muted mb-0 small">Earned Credentials</p>
                </div>
            </div>
            <div class="col-md-3 col-sm-6 mb-4">
                <div class="stats-card">
                    <div class="stats-icon success">
                        <i class="bi bi-star-fill"></i>
                    </div>
                    <h3 class="fw-bold mb-1">{{ stats.totalSkills }}</h3>
                    <p class="text-muted mb-0 small">Skills Developed</p>
                </div>
            </div>
            <div class="col-md-3 col-sm-6 mb-4">
                <div class="stats-card">
                    <div class="stats-icon warning">
                        <i class="bi bi-briefcase-fill"></i>
                    </div>
                    <h3 class="fw-bold mb-1">{{ stats.careerInterests }}</h3>
                    <p class="text-muted mb-0 small">Career Interests</p>
                </div>
            </div>
            <div class="col-md-3 col-sm-6 mb-4">
                <div class="stats-card">
                    <div class="stats-icon info">
                        <i class="bi bi-activity"></i>
                    </div>
                    <h3 class="fw-bold mb-1">{{ stats.recentActivity }}</h3>
                    <p class="text-muted mb-0 small">Recent Activity</p>
                </div>
            </div>
        </div>

        <!-- Main Content Area -->
        <div class="row">
            <!-- Career Assistant Modules -->
            <div class="col-lg-8 mb-5">
                <div class="modern-card">
                    <div class="gradient-header">
                        <h4 class="mb-0 fw-bold position-relative">
                            <i class="bi bi-grid-3x3-gap me-3"></i>Career Assistant Modules
                        </h4>
                        <p class="mb-0 mt-2 opacity-90 position-relative">Explore our comprehensive career development tools</p>
                    </div>
                    <div class="p-4">
                        <div class="row">
                            <!-- Interview Simulator -->
                            <div class="col-md-6 mb-4">
                                <div class="module-card">
                                    <div class="module-icon" style="background: var(--primary-gradient);">
                                        <i class="bi bi-camera-video-fill"></i>
                                    </div>
                                    <h5 class="fw-bold mb-3">Interview Simulator</h5>
                                    <p class="text-muted small mb-4">
                                        Practice mock interviews with real-time feedback and adaptive questions
                                    </p>
                                    <button class="btn btn-outline-primary rounded-pill px-4" disabled>
                                        <i class="bi bi-play-circle me-2"></i>Coming Soon
                                    </button>
                                </div>
                            </div>

                            <!-- Career Discovery -->
                            <div class="col-md-6 mb-4">
                                <div class="module-card">
                                    <div class="module-icon" style="background: var(--success-gradient);">
                                        <i class="bi bi-compass-fill"></i>
                                    </div>
                                    <h5 class="fw-bold mb-3">Career Discovery</h5>
                                    <p class="text-muted small mb-4">
                                        Interest assessments, skills gap analysis, and career path mapping
                                    </p>
                                    <button class="btn btn-outline-success rounded-pill px-4" disabled>
                                        <i class="bi bi-search me-2"></i>Coming Soon
                                    </button>
                                </div>
                            </div>

                            <!-- Professional Development Coach -->
                            <div class="col-md-6 mb-4">
                                <div class="module-card">
                                    <div class="module-icon" style="background: var(--warning-gradient);">
                                        <i class="bi bi-person-workspace"></i>
                                    </div>
                                    <h5 class="fw-bold mb-3">Development Coach</h5>
                                    <p class="text-muted small mb-4">
                                        Resume review, LinkedIn optimization, and goal setting guidance
                                    </p>
                                    <button class="btn btn-outline-warning rounded-pill px-4" disabled>
                                        <i class="bi bi-trophy me-2"></i>Coming Soon
                                    </button>
                                </div>
                            </div>

                            <!-- AI Chat Assistant -->
                            <div class="col-md-6 mb-4">
                                <div class="module-card">
                                    <div class="module-icon" style="background: var(--info-gradient);">
                                        <i class="bi bi-chat-dots-fill"></i>
                                    </div>
                                    <h5 class="fw-bold mb-3">AI Chat Assistant</h5>
                                    <p class="text-muted small mb-4">
                                        Personalized career guidance through conversational AI
                                    </p>
                                    <button class="btn btn-outline-info rounded-pill px-4">
                                        <i class="bi bi-arrow-down me-2"></i>Available Below
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Profile Sidebar -->
            <div class="col-lg-4 mb-5">
                <div class="sidebar-card">
                    <div class="sidebar-header">
                        <h5 class="mb-0 fw-bold">
                            <i class="bi bi-person-circle me-2"></i>Your Profile
                        </h5>
                    </div>
                    <div class="profile-card">
                        {% if user.avatarUrl %}
                            <img src="{{ user.avatarUrl }}" alt="{{ user.fullName }}"
                                 class="profile-avatar" style="background: none;">
                        {% else %}
                            <div class="profile-avatar">
                                {{ user.firstName|slice(0,1) }}{{ user.lastName|slice(0,1) }}
                            </div>
                        {% endif %}
                        <h5 class="fw-bold mb-1">{{ user.fullName }}</h5>
                        {% if user.studentId %}
                            <small class="text-muted d-block mb-3">ID: {{ user.studentId }}</small>
                        {% endif %}

                        <div class="mb-3">
                            <span class="badge-modern">{{ stats.totalSkills }} Skills</span>
                            <span class="badge-modern">{{ stats.totalCredentials }} Credentials</span>
                        </div>

                        {% if careerInterests|length > 0 %}
                            <h6 class="text-muted mb-2 mt-4">Career Interests</h6>
                            <div class="d-flex flex-wrap justify-content-center gap-1">
                                {% for interest in careerInterests|slice(0, 3) %}
                                    <span class="badge bg-light text-dark border rounded-pill">{{ interest.title }}</span>
                                {% endfor %}
                            </div>
                        {% endif %}

                        <a href="{{ path('app_profile') }}" class="btn btn-outline-primary rounded-pill mt-4 px-4">
                            <i class="bi bi-person-gear me-2"></i>Edit Profile
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Enhanced Chat Interface -->
        <div class="row mb-5">
            <div class="col-lg-8">
                <div class="chat-container">
                    <div class="chat-header">
                        <div class="d-flex align-items-center justify-content-between position-relative">
                            <div>
                                <h5 class="mb-1 fw-bold">
                                    <i class="bi bi-chat-dots me-2"></i>Career Assistant Chat
                                </h5>
                                <small class="opacity-75">Get personalized career guidance powered by AI</small>
                            </div>
                            <div class="d-flex align-items-center gap-3">
                                <!-- Mode Selector -->
                                <div class="dropdown">
                                    <button class="btn mode-selector btn-sm dropdown-toggle" type="button" id="modeSelector" data-bs-toggle="dropdown">
                                        <i class="bi bi-gear me-1"></i><span id="currentMode">General</span>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item" href="#" data-mode="general">
                                            <i class="bi bi-chat-dots me-2"></i>General Guidance
                                        </a></li>
                                        <li><a class="dropdown-item" href="#" data-mode="interview">
                                            <i class="bi bi-camera-video me-2"></i>Interview Simulator
                                        </a></li>
                                        <li><a class="dropdown-item" href="#" data-mode="discovery">
                                            <i class="bi bi-compass me-2"></i>Career Discovery
                                        </a></li>
                                        <li><a class="dropdown-item" href="#" data-mode="coach">
                                            <i class="bi bi-person-workspace me-2"></i>Development Coach
                                        </a></li>
                                    </ul>
                                </div>
                                <!-- Personalization Toggle -->
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="personalizationToggle" checked>
                                    <label class="form-check-label text-white" for="personalizationToggle">Personalized</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="chat-messages" id="chatMessages">
                        <!-- Welcome message -->
                        <div class="chat-message">
                            <div class="d-flex align-items-start">
                                <div class="assistant-avatar me-3">
                                    <i class="bi bi-robot"></i>
                                </div>
                                <div class="message-bubble">
                                    <p class="mb-0">Hello! I'm your Career Assistant. I can help you with career guidance, interview practice, career discovery, and professional development. What would you like to work on today?</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="chat-input-container">
                        <form id="chatForm" class="d-flex align-items-center gap-3">
                            <input type="text" id="messageInput" class="form-control chat-input flex-grow-1" 
                                   placeholder="Ask me anything about your career..." autocomplete="off" required>
                            <button type="submit" id="sendButton" class="send-button">
                                <i class="bi bi-send"></i>
                            </button>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Enhanced Sidebar -->
            <div class="col-lg-4">
                <!-- Quick Actions -->
                <div class="sidebar-card">
                    <div class="sidebar-header">
                        <h5 class="mb-0 fw-bold">
                            <i class="bi bi-lightning me-2"></i>Quick Actions
                        </h5>
                    </div>
                    <div class="p-3">
                        <button class="btn quick-action-btn w-100 text-start" onclick="askQuestion('What are my career options based on my skills?')">
                            <i class="bi bi-search me-2 text-primary"></i>Explore Career Options
                        </button>
                        <button class="btn quick-action-btn w-100 text-start" onclick="askQuestion('How can I improve my resume?')">
                            <i class="bi bi-file-earmark-text me-2 text-success"></i>Resume Improvement
                        </button>
                        <button class="btn quick-action-btn w-100 text-start" onclick="askQuestion('What interview questions should I prepare for?')">
                            <i class="bi bi-question-circle me-2 text-warning"></i>Interview Preparation
                        </button>
                        <button class="btn quick-action-btn w-100 text-start" onclick="askQuestion('What skills should I develop next?')">
                            <i class="bi bi-star me-2 text-info"></i>Skill Development
                        </button>
                    </div>
                </div>

                <!-- AI Analysis -->
                <div class="sidebar-card">
                    <div class="sidebar-header">
                        <h5 class="mb-0 fw-bold">
                            <i class="bi bi-magic me-2"></i>AI Analysis
                        </h5>
                    </div>
                    <div class="p-3">
                        <button class="btn quick-action-btn w-100 text-start" onclick="generateSkillAnalysis()">
                            <i class="bi bi-graph-up me-2 text-primary"></i>Analyze My Skills
                        </button>
                        <button class="btn quick-action-btn w-100 text-start" onclick="generateCareerRecommendations()">
                            <i class="bi bi-compass me-2 text-success"></i>Career Recommendations
                        </button>
                        <button class="btn quick-action-btn w-100 text-start" onclick="generateInterviewQuestions()">
                            <i class="bi bi-camera-video me-2 text-warning"></i>Generate Interview Questions
                        </button>
                        <button class="btn quick-action-btn w-100 text-start" onclick="startInterviewSimulation()">
                            <i class="bi bi-play-circle me-2 text-info"></i>Start Mock Interview
                        </button>
                    </div>
                </div>

                <!-- Recent Conversations -->
                <div class="sidebar-card">
                    <div class="sidebar-header">
                        <h5 class="mb-0 fw-bold">
                            <i class="bi bi-clock-history me-2"></i>Recent Conversations
                        </h5>
                    </div>
                    <div class="p-3" style="max-height: 300px; overflow-y: auto;">
                        {% if recentConversations is defined and recentConversations|length > 0 %}
                            {% for conversation in recentConversations|slice(0, 5) %}
                                <div class="conversation-item">
                                    <div class="d-flex align-items-start">
                                        <div class="assistant-avatar me-2" style="width: 30px; height: 30px; font-size: 0.8rem;">
                                            <i class="bi bi-robot"></i>
                                        </div>
                                        <div class="flex-grow-1">
                                            <small class="text-muted d-block">{{ conversation.timestamp|date('M j, g:i A') }}</small>
                                            <small class="d-block mb-1">{{ conversation.message|slice(0, 60) }}{% if conversation.message|length > 60 %}...{% endif %}</small>
                                            <span class="badge bg-light text-dark border rounded-pill" style="font-size: 0.65rem;">{{ conversation.mode|title }}</span>
                                        </div>
                                    </div>
                                </div>
                            {% endfor %}
                        {% else %}
                            <div class="text-center py-4">
                                <i class="bi bi-chat-dots text-muted" style="font-size: 2rem;"></i>
                                <p class="text-muted small mt-2 mb-0">No recent conversations.<br>Start chatting to build your history!</p>
                            </div>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const chatForm = document.getElementById('chatForm');
            const messageInput = document.getElementById('messageInput');
            const chatMessages = document.getElementById('chatMessages');
            const sendButton = document.getElementById('sendButton');
            const personalizationToggle = document.getElementById('personalizationToggle');
            const modeSelector = document.getElementById('modeSelector');
            const currentModeSpan = document.getElementById('currentMode');
            const loadHistoryBtn = document.getElementById('loadHistory');
            const exportHistoryBtn = document.getElementById('exportHistory');
            const clearHistoryBtn = document.getElementById('clearHistory');
            
            let currentMode = 'general';
            let interviewContext = {};

            // Mode switching
            document.querySelectorAll('[data-mode]').forEach(item => {
                item.addEventListener('click', function(e) {
                    e.preventDefault();
                    const mode = this.getAttribute('data-mode');
                    currentMode = mode;
                    currentModeSpan.textContent = this.textContent.trim();
                    
                    // Add mode change message
                    appendMessage('assistant', `Switched to ${this.textContent.trim()} mode. How can I help you?`);
                });
            });

            // Load conversation history
            if (loadHistoryBtn) {
                loadHistoryBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    loadConversationHistory();
                });
            }

            // Export conversation history
            if (exportHistoryBtn) {
                exportHistoryBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    exportConversationHistory();
                });
            }

            // Clear conversation history
            if (clearHistoryBtn) {
                clearHistoryBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    if (confirm('Are you sure you want to clear all conversation history? This action cannot be undone.')) {
                        clearConversationHistory();
                    }
                });
            }

            chatForm.addEventListener('submit', function (e) {
                e.preventDefault();
                const message = messageInput.value.trim();
                if (!message) return;

                // Add user message to chat
                appendMessage('user', message);

                // Disable input while waiting
                messageInput.value = '';
                messageInput.disabled = true;
                sendButton.disabled = true;

                // Show loading indicator
                appendMessage('assistant', '<span class="spinner-border spinner-border-sm text-primary" role="status"></span>');

                fetch('{{ path('app_career_assistant_chat') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({
                        message: message,
                        personalized: personalizationToggle.checked,
                        mode: currentMode,
                        context: interviewContext
                    })
                })
                .then(response => response.json())
                .then(data => {
                    // Remove loading indicator
                    removeLastAssistantMessage();
                    if (data.success) {
                        // Only show detail button for skill analysis responses, not regular chat
                        const showDetail = false; // Don't show detail button for regular chat responses
                        appendMessage('assistant', data.response, showDetail);
                    } else {
                        appendMessage('assistant', 'Sorry, something went wrong. Please try again.');
                    }
                })
                .catch((error) => {
                    console.error('Chat error:', error);
                    removeLastAssistantMessage();
                    appendMessage('assistant', '<span class="text-danger">Sorry, something went wrong.</span>');
                })
                .finally(() => {
                    messageInput.disabled = false;
                    sendButton.disabled = false;
                    messageInput.focus();
                });
            });

            function loadConversationHistory() {
                fetch('{{ path('app_career_assistant_history') }}?mode=' + currentMode)
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.history.length > 0) {
                        // Clear current chat
                        chatMessages.innerHTML = '';
                        
                        // Add welcome message back
                        appendMessage('assistant', 'Hello! I\'ve loaded your recent conversation history. How can I help you today?');
                        
                        // Load recent conversations (last 5)
                        const recentHistory = data.history.slice(0, 5).reverse();
                        recentHistory.forEach(conv => {
                            appendMessage('user', conv.message);
                            appendMessage('assistant', conv.response);
                        });
                    } else {
                        appendMessage('assistant', 'No recent conversation history found for this mode.');
                    }
                })
                .catch(error => {
                    console.error('History load error:', error);
                    appendMessage('assistant', 'Failed to load conversation history.');
                });
            }

            function exportConversationHistory() {
                fetch('{{ path('app_career_assistant_history') }}?limit=50')
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.history.length > 0) {
                        const exportData = {
                            exportDate: new Date().toISOString(),
                            user: '{{ user.fullName }}',
                            conversations: data.history
                        };
                        
                        const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
                        const url = URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = `career-assistant-history-${new Date().toISOString().split('T')[0]}.json`;
                        document.body.appendChild(a);
                        a.click();
                        document.body.removeChild(a);
                        URL.revokeObjectURL(url);
                    } else {
                        alert('No conversation history to export.');
                    }
                })
                .catch(error => {
                    console.error('Export error:', error);
                    alert('Failed to export conversation history.');
                });
            }

            function clearConversationHistory() {
                fetch('{{ path('app_career_assistant_clear_history') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Clear current chat
                        chatMessages.innerHTML = '';
                        appendMessage('assistant', 'Conversation history cleared. How can I help you today?');
                        alert(data.message);
                    } else {
                        alert('Failed to clear conversation history.');
                    }
                })
                .catch(error => {
                    console.error('Clear history error:', error);
                    alert('Failed to clear conversation history.');
                });
            }

            function appendMessage(sender, text, showDetailButton = false) {
                const messageDiv = document.createElement('div');
                messageDiv.classList.add('chat-message');
                
                let messageContent = '';
                if (sender === 'user') {
                    messageContent = `<div class="d-flex align-items-start justify-content-end">
                            <div class="message-bubble me-3">
                                <p class="mb-0">${escapeHtml(text)}</p>
                            </div>
                            <div class="user-avatar">
                                <i class="bi bi-person"></i>
                            </div>
                        </div>`;
                } else {
                    messageContent = `<div class="d-flex align-items-start">
                            <div class="assistant-avatar me-3">
                                <i class="bi bi-robot"></i>
                            </div>
                            <div class="message-bubble">
                                <p class="mb-0">${text}</p>
                                ${showDetailButton ? '<button class="btn btn-outline-primary btn-sm mt-2" onclick="generateDetailedSkillAnalysis()"><i class="bi bi-info-circle me-1"></i>Click for more detail</button>' : ''}
                            </div>
                        </div>`;
                }
                
                messageDiv.innerHTML = messageContent;
                chatMessages.appendChild(messageDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            function removeLastAssistantMessage() {
                const messages = chatMessages.querySelectorAll('.chat-message');
                if (messages.length > 0) {
                    messages[messages.length - 1].remove();
                }
            }

            function escapeHtml(unsafe) {
                return unsafe
                    .replace(/&/g, "&amp;")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/"/g, "&quot;")
                    .replace(/'/g, "&#039;");
            }

            // Advanced AI Features
            window.generateSkillAnalysis = function() {
                appendMessage('user', 'Generate a skill analysis for me');
                appendMessage('assistant', '<span class="spinner-border spinner-border-sm text-primary" role="status"></span>');

                fetch('{{ path('app_career_assistant_skill_analysis') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    removeLastAssistantMessage();
                    if (data.success) {
                        appendMessage('assistant', data.analysis, true);
                    } else {
                        appendMessage('assistant', 'Sorry, I couldn\'t generate a skill analysis right now. Please try again.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    removeLastAssistantMessage();
                    appendMessage('assistant', 'Sorry, something went wrong while generating the skill analysis.');
                });
            };

            window.generateDetailedSkillAnalysis = function() {
                appendMessage('assistant', '<span class="spinner-border spinner-border-sm text-primary" role="status"></span> Generating detailed analysis...');

                fetch('{{ path('app_career_assistant_detailed_skill_analysis') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    removeLastAssistantMessage();
                    if (data.success) {
                        appendMessage('assistant', data.analysis);
                    } else {
                        appendMessage('assistant', 'Sorry, I couldn\'t generate a detailed skill analysis right now. Please try again.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    removeLastAssistantMessage();
                    appendMessage('assistant', 'Sorry, something went wrong while generating the detailed skill analysis.');
                });
            };

            window.generateCareerRecommendations = function() {
                appendMessage('user', 'Generate career recommendations for me');
                appendMessage('assistant', '<span class="spinner-border spinner-border-sm text-primary" role="status"></span>');

                fetch('{{ path('app_career_assistant_recommendations') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    removeLastAssistantMessage();
                    if (data.success) {
                        appendMessage('assistant', data.recommendations, false);
                    } else {
                        appendMessage('assistant', 'Sorry, I couldn\'t generate career recommendations right now. Please try again.');
                    }
                })
                .catch(error => {
                    console.error('Career recommendations error:', error);
                    removeLastAssistantMessage();
                    appendMessage('assistant', 'Sorry, something went wrong while generating career recommendations.');
                });
            }

            window.generateInterviewQuestions = function() {
                const jobRole = prompt('What job role are you interviewing for? (e.g., Software Developer, Marketing Manager, Data Analyst)') || 'general position';
                const level = prompt('What level? (e.g., entry-level, mid-level, senior, lead)') || 'entry-level';
                const industry = prompt('What industry? (optional - press Cancel to skip)') || '';
                
                const industryText = industry ? ` in ${industry} industry` : '';
                appendMessage('user', `Generate interview questions for ${level} ${jobRole}${industryText}`);
                appendMessage('assistant', '<span class="spinner-border spinner-border-sm text-primary" role="status"></span>');

                fetch('{{ path('app_career_assistant_interview_questions') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({
                        jobRole: jobRole,
                        level: level,
                        industry: industry,
                        experience: 'student'
                    })
                })
                .then(response => response.json())
                .then(data => {
                    removeLastAssistantMessage();
                    if (data.success) {
                        appendMessage('assistant', data.questions, false);
                    } else {
                        appendMessage('assistant', 'Sorry, I couldn\'t generate interview questions right now. Please try again.');
                    }
                })
                .catch(error => {
                    console.error('Interview questions error:', error);
                    removeLastAssistantMessage();
                    appendMessage('assistant', 'Sorry, something went wrong while generating interview questions.');
                });
            }

            window.startInterviewSimulation = function() {
                const jobRole = prompt('What job role are you applying for? (e.g., Software Developer, Marketing Manager, Data Analyst)') || 'general position';
                const level = prompt('What level? (e.g., entry-level, mid-level, senior, lead)') || 'entry-level';
                const industry = prompt('What industry? (optional - press Cancel to skip)') || '';
                
                const industryText = industry ? ` in ${industry} industry` : '';
                interviewContext = { jobRole: jobRole, level: level, industry: industry };
                currentMode = 'interview';
                currentModeSpan.textContent = 'Interview Simulator';
                
                appendMessage('assistant', `Starting interview simulation for ${level} ${jobRole}${industryText}. I'll ask you questions one by one and provide feedback. Let's begin!`);
            }

            // Quick Actions
            window.askQuestion = function (question) {
                messageInput.value = question;
                chatForm.dispatchEvent(new Event('submit'));
            }
        });
    </script>
{% endblock %}