{% extends 'base.html.twig' %}

{% block title %}Career Assistant - {{ user.fullName }}{% endblock %}

{% block body %}
    <div class="container-fluid py-4">
        <!-- Page Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="d-flex align-items-center">
                        <div class="bg-gradient-primary text-white rounded-circle d-flex align-items-center justify-content-center me-3" 
                             style="width: 60px; height: 60px; font-size: 1.5rem; background: linear-gradient(135deg, #007BFF, #5BC0EB);">
                            <i class="bi bi-robot"></i>
                        </div>
                        <div>
                            <h1 class="h3 mb-1 text-dark">Career Assistant</h1>
                            <p class="text-muted mb-0">
                                Your AI-powered career guidance companion
                            </p>
                        </div>
                    </div>
                    <div class="d-flex align-items-center gap-3">
                        <div class="text-end">
                            <div class="d-flex align-items-center gap-3">
                                <div class="text-center">
                                    <div class="h5 mb-0 text-primary">{{ stats.totalCredentials }}</div>
                                    <small class="text-muted">Credentials</small>
                                </div>
                                <div class="text-center">
                                    <div class="h5 mb-0 text-success">{{ stats.totalSkills }}</div>
                                    <small class="text-muted">Skills</small>
                                </div>
                                <div class="text-center">
                                    <div class="h5 mb-0 text-warning">{{ stats.careerInterests }}</div>
                                    <small class="text-muted">Interests</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Chat Interface -->
        <div class="row">
            <!-- Chat Area -->
            <div class="col-lg-8">
                <div class="card border-0 shadow-sm h-100" style="min-height: 600px;">
                    <div class="card-header bg-white border-bottom py-3">
                        <div class="d-flex align-items-center justify-content-between">
                            <div class="d-flex align-items-center gap-3">
                                <h5 class="card-title mb-0 text-dark">
                                    <i class="bi bi-chat-dots-fill text-primary me-2"></i>Career Assistant Chat
                                </h5>
                                <span class="badge bg-light text-dark border" id="currentModeBadge">General</span>
                            </div>
                            <div class="d-flex align-items-center gap-2">
                                <!-- Mode Selector -->
                                <div class="dropdown">
                                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" id="modeSelector" data-bs-toggle="dropdown">
                                        <i class="bi bi-gear me-1"></i>Mode
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item" href="#" data-mode="general">
                                            <i class="bi bi-chat-dots me-2"></i>General Guidance
                                        </a></li>
                                        <li><a class="dropdown-item" href="#" data-mode="interview">
                                            <i class="bi bi-camera-video me-2"></i>Interview Simulator
                                        </a></li>
                                        <li><a class="dropdown-item" href="#" data-mode="discovery">
                                            <i class="bi bi-compass me-2"></i>Career Discovery
                                        </a></li>
                                        <li><a class="dropdown-item" href="#" data-mode="coach">
                                            <i class="bi bi-person-workspace me-2"></i>Development Coach
                                        </a></li>
                                    </ul>
                                </div>
                                <!-- Personalization Toggle -->
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="personalizationToggle" checked>
                                    <label class="form-check-label small" for="personalizationToggle">Personalized</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Chat Messages Area -->
                    <div class="card-body p-0" style="height: 450px; overflow-y: auto; background: #f8f9fa;" id="chatMessages">
                        <!-- Welcome message -->
                        <div class="chat-message assistant-message p-3">
                            <div class="d-flex align-items-start">
                                <div class="bg-gradient-primary text-white rounded-circle d-flex align-items-center justify-content-center me-3" 
                                     style="width: 40px; height: 40px; font-size: 1rem; min-width: 40px; background: linear-gradient(135deg, #007BFF, #5BC0EB);">
                                    <i class="bi bi-robot"></i>
                                </div>
                                <div class="chat-bubble bg-white rounded-3 p-3 shadow-sm" style="max-width: 85%; border: 1px solid #e9ecef;">
                                    <p class="mb-0 text-dark">Hello! I'm your Career Assistant. I can help you with career guidance, interview practice, career discovery, and professional development. What would you like to work on today?</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Chat Input Area -->
                    <div class="card-footer bg-white border-top py-3">
                        <form id="chatForm" class="d-flex align-items-center gap-2">
                            <div class="flex-grow-1 position-relative">
                                <input type="text" id="messageInput" class="form-control border-0 bg-light rounded-pill px-4 py-2" 
                                       placeholder="Ask me anything about your career..." autocomplete="off" required
                                       style="box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                            </div>
                            <button type="submit" id="sendButton" class="btn btn-primary rounded-circle d-flex align-items-center justify-content-center" 
                                    style="width: 45px; height: 45px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                                <i class="bi bi-send"></i>
                            </button>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="col-lg-4">
                <!-- Quick Actions -->
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-white border-bottom py-3">
                        <h6 class="card-title mb-0 text-dark">
                            <i class="bi bi-lightning-fill text-warning me-2"></i>Quick Actions
                        </h6>
                    </div>
                    <div class="card-body p-3">
                        <div class="d-grid gap-2">
                            <button class="btn btn-outline-primary btn-sm rounded-pill" onclick="askQuestion('What are my career options based on my skills?')">
                                <i class="bi bi-search me-2"></i>Career Options
                            </button>
                            <button class="btn btn-outline-success btn-sm rounded-pill" onclick="askQuestion('How can I improve my resume?')">
                                <i class="bi bi-file-earmark-text me-2"></i>Resume Help
                            </button>
                            <button class="btn btn-outline-warning btn-sm rounded-pill" onclick="askQuestion('What interview questions should I prepare for?')">
                                <i class="bi bi-question-circle me-2"></i>Interview Prep
                            </button>
                            <button class="btn btn-outline-info btn-sm rounded-pill" onclick="askQuestion('What skills should I develop next?')">
                                <i class="bi bi-star me-2"></i>Skill Development
                            </button>
                        </div>
                    </div>
                </div>

                <!-- AI Analysis Tools -->
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-white border-bottom py-3">
                        <h6 class="card-title mb-0 text-dark">
                            <i class="bi bi-magic text-info me-2"></i>AI Analysis
                        </h6>
                    </div>
                    <div class="card-body p-3">
                        <div class="d-grid gap-2">
                            <button class="btn btn-outline-primary btn-sm rounded-pill" onclick="generateSkillAnalysis()">
                                <i class="bi bi-graph-up me-2"></i>Skill Analysis
                            </button>
                            <button class="btn btn-outline-success btn-sm rounded-pill" onclick="generateCareerRecommendations()">
                                <i class="bi bi-compass me-2"></i>Career Recommendations
                            </button>
                            <button class="btn btn-outline-warning btn-sm rounded-pill" onclick="generateInterviewQuestions()">
                                <i class="bi bi-camera-video me-2"></i>Interview Questions
                            </button>
                            <button class="btn btn-outline-info btn-sm rounded-pill" onclick="startInterviewSimulation()">
                                <i class="bi bi-play-circle me-2"></i>Start Interview
                            </button>
                        </div>
                    </div>
                </div>

                <!-- User Profile Card -->
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-white border-bottom py-3">
                        <h6 class="card-title mb-0 text-dark">
                            <i class="bi bi-person-circle text-primary me-2"></i>Your Profile
                        </h6>
                    </div>
                    <div class="card-body p-3 text-center">
                        {% if user.avatarUrl %}
                            <img src="{{ user.avatarUrl }}" alt="{{ user.fullName }}"
                                 class="rounded-circle mb-3 border" style="width: 80px; height: 80px; object-fit: cover;">
                        {% else %}
                            <div class="bg-gradient-primary text-white rounded-circle d-flex align-items-center justify-content-center mx-auto mb-3 border"
                                 style="width: 80px; height: 80px; font-size: 2rem; background: linear-gradient(135deg, #007BFF, #5BC0EB);">
                                {{ user.firstName|slice(0,1) }}{{ user.lastName|slice(0,1) }}
                            </div>
                        {% endif %}
                        <h6 class="mb-1 text-dark">{{ user.fullName }}</h6>
                        {% if user.studentId %}
                            <small class="text-muted d-block mb-2">ID: {{ user.studentId }}</small>
                        {% endif %}

                        <div class="d-flex justify-content-center gap-2 mb-3">
                            <span class="badge bg-primary rounded-pill">{{ stats.totalSkills }} Skills</span>
                            <span class="badge bg-success rounded-pill">{{ stats.totalCredentials }} Credentials</span>
                        </div>
                        
                        {% if careerInterests|length > 0 %}
                            <div class="mb-3">
                                <small class="text-muted d-block mb-2">Career Interests</small>
                                <div class="d-flex flex-wrap justify-content-center gap-1">
                                    {% for interest in careerInterests|slice(0, 3) %}
                                        <span class="badge bg-light text-dark border rounded-pill">{{ interest.title }}</span>
                                    {% endfor %}
                                </div>
                            </div>
                        {% endif %}
                        
                        <a href="{{ path('app_profile') }}" class="btn btn-outline-secondary btn-sm rounded-pill">
                            <i class="bi bi-person-gear me-1"></i>Edit Profile
                        </a>
                    </div>
                </div>

                <!-- Conversation History -->
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-white border-bottom py-3">
                        <div class="d-flex align-items-center justify-content-between">
                            <h6 class="card-title mb-0 text-dark">
                                <i class="bi bi-clock-history text-secondary me-2"></i>Recent Conversations
                            </h6>
                            <div class="dropdown">
                                <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                    <i class="bi bi-three-dots"></i>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="#" id="loadHistory">
                                        <i class="bi bi-arrow-clockwise me-2"></i>Load Recent
                                    </a></li>
                                    <li><a class="dropdown-item" href="#" id="exportHistory">
                                        <i class="bi bi-download me-2"></i>Export Chat
                                    </a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><a class="dropdown-item text-danger" href="#" id="clearHistory">
                                        <i class="bi bi-trash me-2"></i>Clear History
                                    </a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="card-body p-0" style="max-height: 200px; overflow-y: auto;">
                        {% if recentConversations is defined and recentConversations|length > 0 %}
                            <div class="list-group list-group-flush">
                                {% for conversation in recentConversations|slice(0, 5) %}
                                    <div class="list-group-item border-0 px-3 py-2">
                                        <div class="d-flex align-items-start">
                                            <div class="bg-gradient-primary text-white rounded-circle d-flex align-items-center justify-content-center me-2" 
                                                 style="width: 28px; height: 28px; font-size: 0.7rem; min-width: 28px; background: linear-gradient(135deg, #007BFF, #5BC0EB);">
                                                <i class="bi bi-robot"></i>
                                            </div>
                                            <div class="flex-grow-1">
                                                <small class="text-muted d-block">{{ conversation.timestamp|date('M j, g:i A') }}</small>
                                                <small class="text-truncate d-block text-dark">{{ conversation.message|slice(0, 50) }}{% if conversation.message|length > 50 %}...{% endif %}</small>
                                                <span class="badge bg-light text-dark border rounded-pill" style="font-size: 0.6rem;">{{ conversation.mode|title }}</span>
                                            </div>
                                        </div>
                                    </div>
                                {% endfor %}
                            </div>
                        {% else %}
                            <div class="p-3 text-center">
                                <p class="text-muted small mb-0">No recent conversations. Start chatting to build your history!</p>
                            </div>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <style>
        .bg-gradient-primary {
            background: linear-gradient(135deg, #007BFF, #5BC0EB) !important;
        }
        
        .chat-message {
            transition: all 0.3s ease;
        }
        
        .chat-message:hover {
            background-color: rgba(0, 123, 255, 0.02);
        }
        
        .user-message .chat-bubble {
            background: linear-gradient(135deg, #007BFF, #5BC0EB) !important;
            color: white !important;
            border: none !important;
        }
        
        .assistant-message .chat-bubble {
            background: white !important;
            border: 1px solid #e9ecef !important;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
        }
        
        .chat-bubble .btn-outline-primary {
            border-color: #007BFF;
            color: #007BFF;
            font-size: 0.8rem;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            transition: all 0.2s ease;
        }
        
        .chat-bubble .btn-outline-primary:hover {
            background-color: #007BFF;
            color: white;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .chat-bubble .btn-outline-primary i {
            font-size: 0.7rem;
        }
        
        .form-control:focus {
            border-color: #007BFF;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #007BFF, #5BC0EB);
            border: none;
            transition: all 0.3s ease;
        }
        
        .btn-primary:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }
        
        .card {
            transition: all 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.1) !important;
        }
        
        .badge {
            font-weight: 500;
        }
        
        .dropdown-item:hover {
            background-color: #f8f9fa;
        }
        
        .spinner-border-sm {
            width: 1rem;
            height: 1rem;
        }
    </style>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const chatForm = document.getElementById('chatForm');
            const messageInput = document.getElementById('messageInput');
            const chatMessages = document.getElementById('chatMessages');
            const sendButton = document.getElementById('sendButton');
            const personalizationToggle = document.getElementById('personalizationToggle');
            const modeSelector = document.getElementById('modeSelector');
            const currentModeBadge = document.getElementById('currentModeBadge');
            const loadHistoryBtn = document.getElementById('loadHistory');
            const exportHistoryBtn = document.getElementById('exportHistory');
            const clearHistoryBtn = document.getElementById('clearHistory');
            
            let currentMode = 'general';
            let interviewContext = {};

            // Mode switching
            document.querySelectorAll('[data-mode]').forEach(item => {
                item.addEventListener('click', function(e) {
                    e.preventDefault();
                    const mode = this.getAttribute('data-mode');
                    currentMode = mode;
                    currentModeBadge.textContent = this.textContent.trim();
                    
                    // Add mode change message
                    appendMessage('assistant', `Switched to ${this.textContent.trim()} mode. How can I help you?`);
                });
            });

            // Load conversation history
            loadHistoryBtn.addEventListener('click', function(e) {
                e.preventDefault();
                loadConversationHistory();
            });

            // Export conversation history
            exportHistoryBtn.addEventListener('click', function(e) {
                e.preventDefault();
                exportConversationHistory();
            });

            // Clear conversation history
            clearHistoryBtn.addEventListener('click', function(e) {
                e.preventDefault();
                if (confirm('Are you sure you want to clear all conversation history? This action cannot be undone.')) {
                    clearConversationHistory();
                }
            });

            chatForm.addEventListener('submit', function (e) {
                e.preventDefault();
                const message = messageInput.value.trim();
                if (!message) return;

                // Add user message to chat
                appendMessage('user', message);

                // Disable input while waiting
                messageInput.value = '';
                messageInput.disabled = true;
                sendButton.disabled = true;

                // Show loading indicator
                appendMessage('assistant', '<span class="spinner-border spinner-border-sm text-primary" role="status"></span>');

                fetch('{{ path('app_career_assistant_chat') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({
                        message: message,
                        personalized: personalizationToggle.checked,
                        mode: currentMode,
                        context: interviewContext
                    })
                })
                .then(response => response.json())
                .then(data => {
                    // Remove loading indicator
                    removeLastAssistantMessage();
                    if (data.success) {
                        // Only show detail button for skill analysis responses, not regular chat
                        const showDetail = false; // Don't show detail button for regular chat responses
                        appendMessage('assistant', data.response, showDetail);
                    } else {
                        appendMessage('assistant', 'Sorry, something went wrong. Please try again.');
                    }
                })
                .catch((error) => {
                    console.error('Chat error:', error);
                    removeLastAssistantMessage();
                    appendMessage('assistant', '<span class="text-danger">Sorry, something went wrong.</span>');
                })
                .finally(() => {
                    messageInput.disabled = false;
                    sendButton.disabled = false;
                    messageInput.focus();
                });
            });

            function loadConversationHistory() {
                fetch('{{ path('app_career_assistant_history') }}?mode=' + currentMode)
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.history.length > 0) {
                        // Clear current chat
                        chatMessages.innerHTML = '';
                        
                        // Add welcome message back
                        appendMessage('assistant', 'Hello! I\'ve loaded your recent conversation history. How can I help you today?');
                        
                        // Load recent conversations (last 5)
                        const recentHistory = data.history.slice(0, 5).reverse();
                        recentHistory.forEach(conv => {
                            appendMessage('user', conv.message);
                            appendMessage('assistant', conv.response);
                        });
                    } else {
                        appendMessage('assistant', 'No recent conversation history found for this mode.');
                    }
                })
                .catch(error => {
                    console.error('History load error:', error);
                    appendMessage('assistant', 'Failed to load conversation history.');
                });
            }

            function exportConversationHistory() {
                fetch('{{ path('app_career_assistant_history') }}?limit=50')
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.history.length > 0) {
                        const exportData = {
                            exportDate: new Date().toISOString(),
                            user: '{{ user.fullName }}',
                            conversations: data.history
                        };
                        
                        const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
                        const url = URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = `career-assistant-history-${new Date().toISOString().split('T')[0]}.json`;
                        document.body.appendChild(a);
                        a.click();
                        document.body.removeChild(a);
                        URL.revokeObjectURL(url);
                    } else {
                        alert('No conversation history to export.');
                    }
                })
                .catch(error => {
                    console.error('Export error:', error);
                    alert('Failed to export conversation history.');
                });
            }

            function clearConversationHistory() {
                fetch('{{ path('app_career_assistant_clear_history') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Clear current chat
                        chatMessages.innerHTML = '';
                        appendMessage('assistant', 'Conversation history cleared. How can I help you today?');
                        alert(data.message);
                    } else {
                        alert('Failed to clear conversation history.');
                    }
                })
                .catch(error => {
                    console.error('Clear history error:', error);
                    alert('Failed to clear conversation history.');
                });
            }

            function appendMessage(sender, text, showDetailButton = false) {
                const messageDiv = document.createElement('div');
                messageDiv.classList.add('chat-message', sender === 'user' ? 'user-message' : 'assistant-message', 'p-3');
                
                let messageContent = '';
                if (sender === 'user') {
                    messageContent = `<div class="d-flex align-items-start justify-content-end">
                            <div class="chat-bubble rounded-3 p-3 ms-auto" style="max-width: 85%;">
                                <p class="mb-0">${escapeHtml(text)}</p>
                            </div>
                        </div>`;
                } else {
                    messageContent = `<div class="d-flex align-items-start">
                            <div class="bg-gradient-primary text-white rounded-circle d-flex align-items-center justify-content-center me-3" 
                                 style="width: 40px; height: 40px; font-size: 1rem; min-width: 40px; background: linear-gradient(135deg, #007BFF, #5BC0EB);">
                                <i class="bi bi-robot"></i>
                            </div>
                            <div class="chat-bubble rounded-3 p-3" style="max-width: 85%;">
                                <p class="mb-0">${text}</p>
                                ${showDetailButton ? '<button class="btn btn-outline-primary btn-sm mt-2" onclick="generateDetailedSkillAnalysis()"><i class="bi bi-info-circle me-1"></i>Click for more detail</button>' : ''}
                            </div>
                        </div>`;
                }
                
                messageDiv.innerHTML = messageContent;
                chatMessages.appendChild(messageDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            function removeLastAssistantMessage() {
                const messages = chatMessages.querySelectorAll('.assistant-message');
                if (messages.length > 0) {
                    messages[messages.length - 1].remove();
                }
            }

            function escapeHtml(unsafe) {
                return unsafe
                    .replace(/&/g, "&amp;")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/"/g, "&quot;")
                    .replace(/'/g, "&#039;");
            }

            // Advanced AI Features
            window.generateSkillAnalysis = function() {
                appendMessage('user', 'Generate a skill analysis for me');
                appendMessage('assistant', '<span class="spinner-border spinner-border-sm text-primary" role="status"></span>');

                fetch('{{ path('app_career_assistant_skill_analysis') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    removeLastAssistantMessage();
                    if (data.success) {
                        appendMessage('assistant', data.analysis, true);
                    } else {
                        appendMessage('assistant', 'Sorry, I couldn\'t generate a skill analysis right now. Please try again.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    removeLastAssistantMessage();
                    appendMessage('assistant', 'Sorry, something went wrong while generating the skill analysis.');
                });
            };

            window.generateDetailedSkillAnalysis = function() {
                appendMessage('assistant', '<span class="spinner-border spinner-border-sm text-primary" role="status"></span> Generating detailed analysis...');

                fetch('{{ path('app_career_assistant_detailed_skill_analysis') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    removeLastAssistantMessage();
                    if (data.success) {
                        appendMessage('assistant', data.analysis);
                    } else {
                        appendMessage('assistant', 'Sorry, I couldn\'t generate a detailed skill analysis right now. Please try again.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    removeLastAssistantMessage();
                    appendMessage('assistant', 'Sorry, something went wrong while generating the detailed skill analysis.');
                });
            };

            window.generateCareerRecommendations = function() {
                appendMessage('user', 'Generate career recommendations for me');
                appendMessage('assistant', '<span class="spinner-border spinner-border-sm text-primary" role="status"></span>');

                fetch('{{ path('app_career_assistant_recommendations') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    removeLastAssistantMessage();
                    if (data.success) {
                        appendMessage('assistant', data.recommendations, false);
                    } else {
                        appendMessage('assistant', 'Sorry, I couldn\'t generate career recommendations right now. Please try again.');
                    }
                })
                .catch(error => {
                    console.error('Career recommendations error:', error);
                    removeLastAssistantMessage();
                    appendMessage('assistant', 'Sorry, something went wrong while generating career recommendations.');
                });
            }

            window.generateInterviewQuestions = function() {
                const jobRole = prompt('What job role are you interviewing for? (e.g., Software Developer, Marketing Manager, Data Analyst)') || 'general position';
                const level = prompt('What level? (e.g., entry-level, mid-level, senior, lead)') || 'entry-level';
                const industry = prompt('What industry? (optional - press Cancel to skip)') || '';
                
                const industryText = industry ? ` in ${industry} industry` : '';
                appendMessage('user', `Generate interview questions for ${level} ${jobRole}${industryText}`);
                appendMessage('assistant', '<span class="spinner-border spinner-border-sm text-primary" role="status"></span>');

                fetch('{{ path('app_career_assistant_interview_questions') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({
                        jobRole: jobRole,
                        level: level,
                        industry: industry,
                        experience: 'student'
                    })
                })
                .then(response => response.json())
                .then(data => {
                    removeLastAssistantMessage();
                    if (data.success) {
                        appendMessage('assistant', data.questions, false);
                    } else {
                        appendMessage('assistant', 'Sorry, I couldn\'t generate interview questions right now. Please try again.');
                    }
                })
                .catch(error => {
                    console.error('Interview questions error:', error);
                    removeLastAssistantMessage();
                    appendMessage('assistant', 'Sorry, something went wrong while generating interview questions.');
                });
            }

            window.startInterviewSimulation = function() {
                const jobRole = prompt('What job role are you applying for? (e.g., Software Developer, Marketing Manager, Data Analyst)') || 'general position';
                const level = prompt('What level? (e.g., entry-level, mid-level, senior, lead)') || 'entry-level';
                const industry = prompt('What industry? (optional - press Cancel to skip)') || '';
                
                const industryText = industry ? ` in ${industry} industry` : '';
                interviewContext = { jobRole: jobRole, level: level, industry: industry };
                currentMode = 'interview';
                currentModeBadge.textContent = 'Interview Simulator';
                
                appendMessage('assistant', `Starting interview simulation for ${level} ${jobRole}${industryText}. I'll ask you questions one by one and provide feedback. Let's begin!`);
            }

            // Quick Actions
            window.askQuestion = function (question) {
                messageInput.value = question;
                chatForm.dispatchEvent(new Event('submit'));
            }
        });
    </script>
{% endblock %}